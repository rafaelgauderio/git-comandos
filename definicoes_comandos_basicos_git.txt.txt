# window.open((document.getElementsByTagName('iframe')[0].attributes.src.value).replace('controls=0', 'controls=1'));

Qual a utilidade de git?
	-> Versionamento do software
	-> vários usuários editando o mesmo arquivo e sendo possível voltar para versões anteriroes
	-> criado por LINUS TORVALDS - criou para poder versionar o Kernel do Linux
		-> Odiava o CVS, usava tarballs e patches
		-> Subversion também era horrível
	-> git != github
		-> github = Sevidor remoto para armazenamentod e código;
		-> git = sistema de versionamento de código distribuido;

	-> Existem também o cvs, bitkeeper, gitlab, gitbucket
Vantagens
	-> Controle de Versão
	-> Armazenamento em nuvem
	-> Trabalho em equipe
	-> Melhorar seu código

---------------------------------------------------------------------------------------
cli = comando line interface
gui = graphic user interface

  Windows (shell)	
# cd		cd /
# dir		
# mkdir
# del / rmdir
# cls		clear screem
# [TAB]		autocompletar
# echo Texto inserido teste > novo_arquivo.txt
# del pasta	deleta apenas os arquivos e não deleta a pasta
# rmdir pasta /S /Q	removeu o repositorio	

Unix (bash)

# cd		change directory	cd /etc
# cd ..		retroceder 1 nível
# ls
# mkdir
# rm -rf	remover diretodiros e arquivos
# clear		crtl + L
# echo Texto inserido teste > novo_arquivo.txt
# rm -rf pasta/		remover recursivamente e forçando

---------------------------------------------------------------------------------------
Instalando o git
https://git-scm.com

Linux

# apt-get install git		ubuntu
# add-apt-repository pp:git-cre/ppa
# apt update
# apt install git		ubuntu com verso mais estável do git
# yum install git		fedora
# dnf install git
# emerge -- ask --verbose dev-vcs/git		Gentoo
# pacman -S git			Arch Linux
# zypper install git		Open Suse
# urpmi git			Mageia
# nix-env -i git		Nix/NixOS
# pkg install git		FeeBSD
# pkg install developer/versioning/git		Solaris Express

# git --version
# pkg_add git			OpenBDS


Mac
Após isntalar o Homebrew
# brew install git

--------------------------------------------------------------------------------------
Funcionamente do software git

-> SHA1
	Secure Hash Algorithm
	É um conjunto de funções de hash criptográficas gerdas pela NSA dos EUA
	Algoritmo de encriptação gera conjunto de caracteres identificador de 40 dígitos

# echo "Hello World" | openssl sha1		sai uma linha criptografada
# openssl sha1 arquivo.txt

	Se alterar um linha do arquivo vai gerar um novo hash, e se voltar para 
forma original, gera o mesmo hash, logo é muito efeiciente para verificar
Se um arquivo foi alterado.	

-> OBJETOS FUNDAMENTAIS

	-> BLOBS 
Objetos BLOBS contém meta dados nete = blob tamanho \0 texto
	BLOBS são a estrutura básica do git. BLOBS são bolhas

# echo 'texto' | git hash-object --stdin		gera uma saida sha1
# echo -e 'texto'					gera uma sauda sha1 diferente
# echo 'texto' | git hash-object --stdin		gera uma saida sha1
# echo -e 'blog 9\0texto' | openssl sha1		gera uma saida sha1 igual	
	
	-> TREES
As árvores armazenam blogs = blobs	sha1	nome_do_arquivo.txt
Responsável por montar todo a estrutura dos arquivos
Pode apontar para outras árvores (objeto recursivo)

	-> COMMITS
Objeto que vai juntar tudo e dar sentido para a alteração. Aponta para os itens abaixo
	tree
	parente
	autor
	mensagem
	timestam
o SHA1 desse commit é o bash de toda essa informação
	commit -> tree -> blobs

-> SISTEMA DISTRIBUIDO e SEGURO
	É sistema que possui múltiplas cópias de si mesmo em diferentes locais
	Código na nuvem representa a versão mais atualizada do código
	É quase impossível alterar os commits
	Então todas as versões que estão na nuvem, são versões confiáveis
-----------------------------------------------------------------------------------------
COMANDOS INICIAIS

# programa comando flags

# git init
# git status				estados dos arquivos para commitar
# ls --all -l				para poder ver a pasta oculta .git
# touch arquivo_markdown.md
# git rm *				mover para untracked
# git add *				adiciona todos
# git add .				move de untracked para staged
# git add nome_arquivo diretorio/	move para staged
# git restore				to discard chances in working directory
# git restpre --staged <file>		to unstage	
# git commit	
# git commit -m "Comit inicial"
# echo > README.MD
# git push -u orign master		enviar para o repositorio do git


ESTADOS ARQUIVOS
	-> untraked	Arquivos que o git não tem ciência deles.
	-> Tracket	
		-> unmodified
		-> modifiel
		-> staged	Parte de trás do palco é backstage
				Arquivos que estão se preparando para fazer parte de outro tipo de agrupamento
				Arquivos estão se preparando para ser commitados, sair da parte de trás do palco
				Se commitar o arquivo na fase staged ele volta a ser unmodified
Dentro de um arquivo commitado é salvo uma Snapshot
	servidor
		-> REMOTE REPOSITORY
	Ambiente de desenvolvimento
		-> WORKING DIRECTORY
		-> STAGING AREA
		-> LOCAL REPOSITORY
-> Os commits são necessários para sincronizar os diretórios locais com os repositórios do git

# git config --list
# git config --global --unset user.email
# git config --global --unset user.nickname
# git config --global user.nickname "Rafael De Luca"
# git config --global user.username "email_valido"

# git init
# git add README.md
# git commit -m "first commit"
# git remote add origin link.git	apotar um repositório local para um repositório remoto
	origin é apenas um alias para não digitar a url toda hora
# git remote -v				lista os repositórios remotos cadastrados
# git push origin master
# git push -u origin master
----------------------------------------------------------------------------------------------------
RESOLVENDO CONFLITOS COM VERSÕES DO CÓDIGO

-> Edições na mesma linhas por usuários diferentes costumam dar conflitos = CONFLITO DE MERGE
-> git manda mensagem: antes de empurrar a tua nova versão, vai primeiro essa nova
	versão que está aqui no git hub
-> Git diz para tu resolver esse problema de versão na mão e depois empurrar para o repositório
	Automatic merge failde; fix conflits and then commit the result

# git pull orgin master		vai PUXAR o que está no git para a máquina local
	
	Apare um ====== em uma linha
	Dessa linha para baixo está a alteração do git hub
	Apaga os campos com >>>>>>>>>>>>>	<<<<<<<< (remover os caracteres estranhos)
				head	hash code 
	E altera manualmente os códigos e salva os arquivos
# git add *
# git commit -m "Resolvido conflitos manualmente"
# git push origin master

----------------------------------------------------------------------------------------------------
BAIXAR UM REPOSITÓRIO

https://github.com/python/cpython.git

# git clone https://git.. nome_no_arquivo.git
# cd cpython/
# ls --all





















































	

	